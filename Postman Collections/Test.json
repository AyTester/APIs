{
	"info": {
		"_postman_id": "dd18dda7-c735-4589-b445-93566477b839",
		"name": "NIMC-NIN",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "NIN CONTROLLER",
			"item": [
				{
					"name": "NIN Validation",
					"item": [
						{
							"name": "Validate a NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1996a17-c3ab-40bd-860c-14c58bfeaec9",
										"exec": [
											"var responseJson = pm.response.json();",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Response is an object with data property', function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');",
											"})",
											"",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {",
											"    var data = pm.response.json().data;",
											"    pm.expect(data).to.have.property('lastName');",
											"    pm.expect(data).to.have.property('firstName');",
											"    pm.expect(data).to.have.property('nin');",
											"    pm.expect(data).to.have.property('bankId');",
											"    pm.expect(data).to.have.property('dob');",
											"    pm.expect(data).to.have.property('verified');",
											"    pm.expect(data).to.have.property('middleName');",
											"    pm.expect(data).to.have.property('responseCode');",
											"    pm.expect(data).to.have.property('responseCode').not.eql(\"\");",
											"})",
											"",
											"pm.test(\"Verify response value\", function() {",
											"    pm.expect(responseJson.success).to.eql(true); ",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");",
											"    pm.expect(responseJson.responseCode).to.not.eql(\"\");",
											"    ",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "799b5c11-998d-43b8-b0ea-5cbab7654c52",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// // // Setting each NIN value as an environment variable in Postman\r",
											"// // pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"// // pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"// // pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"// console.log(\"NIN_1:\", nin1);\r",
											"// // console.log(\"NIN_2:\", nin2);\r",
											"// // console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a5ef86aa-d2b7-459d-8480-5c27b6a2828f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "12kwoeo2o3keo2o30d",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "1234565",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6eb51912-c587-4ab6-89f2-a9dc1fec2e38",
										"exec": [
											"var responseJson = pm.response.json();",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Response is an object with field errors property', function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');",
											"})",
											"",
											"pm.test('Verify fieldName property', function () {",
											"    pm.expect(responseJson.data).to.have.property('bankId');",
											"    pm.expect(responseJson.data).to.have.property('responseCode');",
											"});",
											"",
											"pm.test('Verify response value', function () {",
											"    pm.expect(responseJson.success).to.eql(true);",
											"    pm.expect(responseJson.message).to.eql('Successful');",
											"    pm.expect(responseJson.data.responseCode).to.eql('01');",
											"})",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7707281c-244c-4ef5-b5cb-59255505f2d1",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3aec507f-4fd2-4a5d-9461-e8302d0e63e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "12kwoeo2o3keo2o30d",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "1234565",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{invalidNIN}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN with incomplete NIN(LCL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa123483-e595-41aa-b0f7-797ef595f3b7",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "83e107c0-166c-40fc-9693-f51ba905a544",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "12kwoeo2o3keo2o30d",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "1234565",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"706254870\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN as empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99a98e56-de5e-4324-8c05-441d1120b9a1",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9ffb3fb7-3853-4b74-ba54-c1b09c59e5b4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "12kwoeo2o3keo2o30d",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "1234565",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN as white space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8c76519-2e8a-4d60-be83-0762423b28a4",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f3af6119-7302-4fb6-9e63-bb46554f41cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"     \",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f2e79a5-ba56-44ac-bb66-fa381a8566e0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1ed6172a-d3cb-4ff2-addc-2d5d70a28fbd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"jhdjcjhdsjh\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3498803-3ee8-41bc-bb10-265902c13693",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "96ea7b5f-42b8-40d6-b905-85cdbfb9944e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"jhdjj954664\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3f348ef-7fc0-48d4-add3-55fb1f59c804",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8e403fce-fc22-4bde-ab70-21e62d88c71d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"?><,.;'{[\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN without Authorization(clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dd00760-f47b-48da-baf5-5c1af6dfbac3",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1b3d4fb3-75b8-4b97-a58a-c5c29b5d9f8e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{invalidDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate NIN without Authorization(applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40a721dc-b8d5-461a-a9f5-a355443cf893",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"    \r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eaf1a7ac-a47a-45fd-a3a2-b444b835ffc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{lastname}}\",\r\n  \"lastName\": \"{{firstname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with FirstName as strings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c6be3e7-47df-4c15-bf2d-f0905c3c1269",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "32103fbb-e0e1-4d05-8788-4203fb7e319a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with FirstName as an empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b48f300-a296-40ed-82f8-2e4ddbc7617c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "041aa85d-47d3-45be-9748-ce0dc9a3a8e4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with FirstName as white space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d3d2c9e-99be-4342-a0ad-c3c915997ce9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ec5d71d6-b031-4df2-ab6d-48106053801d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"  \",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with LastName as strings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91f8aefc-de9c-4fed-aa24-97af7e4fbe6e",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "842f7087-77e8-44e1-8d74-0c146d12ff8e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with LastName as an empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ae8df76-8c80-4f60-8155-ea176dee053f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c2571b7c-bd4b-489c-be33-99f709b8ceb0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with LastName as white space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "827f0ed1-2ab7-4e37-8d88-5a4e9fffe4cc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "de702609-2b23-4f29-8d16-98660ec2eed7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"      \",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with DOB as strings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e44e518-e96b-4e2f-b44b-af060894c628",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "244ac16e-d154-4e37-a88f-5c9634e35c40",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with valid DOB format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f2e8443-1261-47ec-80f1-4d725f11f1d3",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('nin');\r",
											"    pm.expect(data).to.have.property('bankId');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('verified');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "936c51d6-2bea-4f95-856d-e13d9f766be1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{validDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with DOB as empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9164525-3ecc-4258-8335-8fcc36bef4cc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "59873cf7-705a-40b9-b0d2-4e4a1125e747",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with DOB as white space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "861e14b5-52b5-4282-9524-9e93382ed1bd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ff2cb07e-9481-41ce-9554-f36fc9d60e10",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"    \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with DOB as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82c6a24a-31d3-41d9-bae0-1e268641cc64",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "df794cb6-47d3-436f-b2e1-c98a16e36964",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"13Oct2024\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						},
						{
							"name": "Validate valid NIN with invalid DOB format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a72e595d-4cf5-4c12-9653-efc367e30a58",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has status, message, and success properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData).to.have.property('success');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in fieldErrors array has fieldName and message properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.fieldErrors.forEach(function(error) {\r",
											"        pm.expect(error).to.have.property('fieldName');\r",
											"        pm.expect(error).to.have.property('message');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "86c70705-9902-4f21-9634-677806cbd328",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN2}}\",\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{lastname}}\",\r\n  \"middleName\":\"{{middlename}}\",\r\n  \"dob\": \"{{invalidDOBformat}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate"
							},
							"response": []
						}
					],
					"id": "dbf8eb0b-e212-4991-a40d-84c43b014b0b"
				},
				{
					"name": "NIN and Fingerprint Validation",
					"item": [
						{
							"name": "Validate NIN with fingerprint position 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3119be10-6358-4798-ae05-f2b846fefb36",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef0bc615-837d-43fa-b8af-c1ff69003f67",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1469395c-7601-4180-9530-64df7ca1462e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "12kwoeo2o3keo2o30d",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "1234565",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\":\"11111111111\",\r\n  \"fingerprint\": \"\",\r\n  \"position\": \"1\"  \r\n}\r\n\r\n// alternate positions !factored!",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a9b7ef96-150d-4e0c-8908-d63cfb752f65",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a062fa92-fc43-48a9-8af7-e3103b4d0a63",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4fe216d6-537d-4243-9e2b-3ebb385422ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "42e80aca-1bda-4170-8df2-92dc2a29ece4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bd99510e-e9a6-4763-b5cb-5cd8c63cafc0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"63DH47383AHK\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 and invalid NIN as special charaters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "21b64dec-2366-40d6-aea6-fa2e3edd5049",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ce3d8373-5991-4f76-bdd6-f8469909a5cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 1 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d863527-a903-4dd0-b032-63ca10d55a03",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa39fee8-ffac-4edb-ac09-2c2eaf7e1b27",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4c97151-5519-4a6f-a348-17cf5b03224e",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "93a21864-2433-4e2e-b024-3cce77cdda93",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"11111111111\",\r\n  \"fingerprint\": \"{{fingerprint2}}\",\r\n  \"position\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e88353bd-c73a-4442-aefc-bbaab1015e99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dab26239-4e42-4461-b05d-297cd7da7bd3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2e4d7c7f-cdf3-49e3-8790-eb80b5816083",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "16109eaf-d7c6-4a15-8f1e-f3edcb67c0ae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3ab2bf0c-c800-400b-86d6-f3be0c8ff0ee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"QAXS567POKJ\",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9802cb2b-6047-4e5e-becc-1a5a5e012482",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4691e293-dff1-4c48-b1bd-28cad59a5131",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 2 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "40e48e9b-5c9e-4062-9901-9c16346205ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint2}}\",\r\n\"position\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "71020fef-35a7-45b1-9fcf-b95df1aba0e4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint3}}\",\r\n  \"position\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4a1dfd16-4b35-4295-b6d6-850bc0bea82c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ce751142-8608-4abe-b276-36b52224cf14",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c2707d57-97d1-4158-ab60-95c2abec640c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bbfcc701-1701-4b69-9453-1f0d7da3cf74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "67fd77dc-caaf-46ec-9a03-5e8fc4cd4b0c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"QAXS567POKJ\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "98340582-1277-409a-a882-5a82b7331744",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a490ca12-2d96-430b-9530-b65d14e0f9c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 3 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2fd91426-d56b-411d-8470-bb992a276e64",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5b0ba181-06ab-4073-802a-3089a5e3e021",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint4}}\",\r\n  \"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "233427de-ed36-493e-9093-5580b0bbe469",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "84c6b217-829c-42db-875c-99ff9c62665a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "69e52fbb-c0b8-4f9b-8176-639d5448b15b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6f063819-00ea-414a-bb33-b8b390df5eaa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1ec7d804-c080-43e0-aff6-c21811f54b69",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"QAXS567POKJ\",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\":\"4\"\r\n\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "83bc05e8-973f-45ca-b5af-b9036cc682ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "948c50e5-7f65-4ffa-8b41-b8bdbf20c538",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 4 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c0c38697-bb02-4bd3-bdf0-2105d9b57dfa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint4}}\",\r\n\"position\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1eb04185-4bcc-4529-b9fb-3863fb29afed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint5}}\",\r\n  \"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "26393188-c2bd-4416-b7e6-9dc578961c18",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "924820d5-1118-4d76-ab70-3f5d9450eaea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "352542ad-7fc7-4a20-964d-71b10ccc77ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d66312fd-c1b0-49de-b4e4-3de9c025a31e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4ee0706a-ba17-459f-8a51-56b99ba6bb1e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"63DH47383AHK\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c2f6d96e-10dd-4bcc-95a1-5d8222348243",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c375f429-fdc6-4213-8033-8ad058380e29",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 5 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dfe5357b-52a4-4461-9269-b4aea4acae6b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b7ae8299-bdff-4550-a3e5-7dd4ce7eead7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint6}}\",\r\n  \"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "109f271e-0452-4ba4-8706-96a04eeabcf0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ba74d47f-d286-42a7-a28d-cd6ec44989be",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "657f36de-887e-4b5c-b5b8-addc12ede3cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f3311afc-3623-4e13-933f-bb85b840ce3c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "40ff3882-357b-4b31-8ab4-d11b42436032",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"63DH47383AHK\",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "31a99205-6127-4eb4-bb0b-03fa7354de7a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6cbe5397-1e5c-438d-ab70-d2877a71a0ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 6 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "35ba7e43-0764-4a11-8ed8-0533eb87c496",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint6}}\",\r\n\"position\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d80f13d0-4de7-4183-bf19-27e07637a288",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint7}}\",\r\n  \"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bf8cee71-df59-42ab-b000-cd1a8ce41b1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ef39fa57-c01f-4225-b890-3bd1fb62746b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1ce318a6-bf63-4ce1-8596-74924b759515",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f54ba4f-bb4f-44f0-9976-bf73dddc4b67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3cd3824a-d93b-4050-84a7-cc8f2f0e2ca8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"63DH47383AHK\",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bba890ef-7b13-4d43-919a-926a0cefbd25",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "19615dd2-dc67-47f8-9292-8ca9f8f47dc7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 7 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f7fc1e31-9e3d-4952-bb6c-c05a9afee515",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint7}}\",\r\n\"position\": 7\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a4615e00-5450-4205-bbf5-c86fc2a59efb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint8}}\",\r\n  \"position\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d1a7f8d5-1985-415d-8618-bbcc62775a33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint1}}\",\r\n\"position\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "40546486-8ab1-41c4-a207-2b210150c61d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint8}}\",\r\n\"position\": 8\r\n\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "92da1db3-36c0-4cff-a06e-9c876892fa43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint8}}\",\r\n\"position\": 8\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "04caee51-2dd8-4d6b-8205-3123a51824df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint8}}\",\r\n\"position\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "47a39aa0-60e4-435c-82d8-5944fafdbaad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"63DH47383AHK\",\r\n\"fingerprint\":\"{{fingerprint8}}\",\r\n\"position\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0502c354-d1bc-4eb3-a9fe-a0945da9b32c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint8}}\",\r\n\"position\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4b19ebae-19b5-46a8-9a5a-fac0c9fd2971",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint8}}\",\r\n\"position\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 8 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f4e882bc-7ad9-49ed-9cb9-ae58ac99bb1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint8}}\",\r\n\"position\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f4407e0d-738a-4c5b-9201-7a6b0a2b1d1c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint9}}\",\r\n  \"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d773f14e-3615-4ffa-bb88-2f3d12f7c394",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint9}}\",\r\n\"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c1fc139f-b9d6-4a1d-9b85-bfdfcd9a8f0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint9}}\",\r\n\"position\": 9\r\n\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b6b7b3e7-6dbb-4140-ad24-1af25f8b2135",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint9}}\",\r\n\"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "10848d0d-f84b-48de-b53e-7d884819d8ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"fingerprint9\",\r\n\"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "53ef63f2-6f13-42e3-82c7-6421ef5825ac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"63DH47383AHK\",\r\n\"fingerprint\":\"{{fingerprint9}}\",\r\n\"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a6ca56ed-de43-45f7-af6a-e6ceb5f08a3d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint9}}\",\r\n\"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6e589149-1ed7-41e8-9786-7dbf4bd7291a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint9}}\",\r\n\"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 9 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4b1673ef-0116-4ed5-b5c3-f995bcd3c59c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint9}}\",\r\n\"position\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64018ea4-424f-44c3-b2f8-4c1715106a41",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"pm.test('Response data has properties lastName, firstName, nin, bankId, dob, verified, middleName, responseCode', function () {\r",
											"    var data = pm.response.json().data;\r",
											"    pm.expect(data).to.have.property('lastName');\r",
											"    pm.expect(data).to.have.property('firstName');\r",
											"    pm.expect(data).to.have.property('dob');\r",
											"    pm.expect(data).to.have.property('middleName');\r",
											"    pm.expect(data).to.have.property('responseCode');\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a68df67-7cd8-486f-983f-67ebe136d549",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "47d3a326-fda2-4d4a-83d7-b816fb05ec4e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"{{NIN1}}\",\r\n  \"fingerprint\": \"{{fingerprint10}}\",\r\n  \"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.have.property(\"responseCode\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c65060c4-2b0a-4b63-b111-cc1f544517b1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 and invalid NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ddc431-cfe7-4775-9380-ecfc721929f6",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37e51e26-6947-4fef-84d9-b52c7e389eb2",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4acded7a-a141-4f9c-9280-d59e2893eeff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"AJDHFHVNVKJ\",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 and invalid NIN as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aeef5378-fdc1-4e21-b363-8c92a358ba96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"  \",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 and invalid NIN as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9537f2f-ea14-448d-8ec8-f3a71d5b7022",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a04197-8fe2-42c1-93ea-415081e6c820",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ffb9be6c-6056-4b70-8bca-24912b6ee1a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 and invalid NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0787821-3bad-4ff8-b772-ae2c1e5b72de",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32491c9-6fb2-48ba-8f72-aa307131a709",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1e8c5cb4-914a-428a-964d-fa3dc03ae02d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"63DH47383AHK\",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 and invalid NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e64a3fb9-ec0f-4be0-9814-e5674ebcab7a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"@#$)(&^%$%^\",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 without authorization (clientId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b88abf88-afc1-451b-b866-d0f8b4f01a47",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position 10 without authorization (applicationId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "564dda77-f81e-41dc-b4e6-26c74bc208a9",
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"})\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.error).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41d010c4-f119-4b41-ae49-4abc08967bea",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "db047064-470c-407c-8530-3863c83b5b34",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"fingerprint\":\"{{fingerprint10}}\",\r\n\"position\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid  fingerprint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61367738-ea8f-4498-be50-9343c24d67dc",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"    pm.expect(responseJson.data.responseCode).to.eql('01');\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7af1d2ab-c999-410f-aa9a-4405100771a4",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e5804027-2611-448c-8007-8ae4e170d865",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN1}}\",\r\n\"fingerprint\":\"{{invalidfingerprint}}\",\r\n\"position\":\"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid  position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61367738-ea8f-4498-be50-9343c24d67dc",
										"exec": [
											"\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"    pm.expect(responseJson.data.responseCode).to.eql('01');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7af1d2ab-c999-410f-aa9a-4405100771a4",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fd50b58e-6c1f-4208-a70f-be2c914c176b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN1}}\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\":\"7\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2587c789-a168-4c7a-a213-0060f2321de7",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1b6ddbba-d160-48fe-9160-7057531840cc",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "84f60053-6976-4cba-8471-e3153aacf1ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN1}}\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position as alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33513baf-fa20-4a5b-bd22-4d8f7c9a3e67",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.status).to.eql(400);\r",
											"    pm.expect(responseJson.detail).to.eql('Failed to read request');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6ca11c2-6781-4d6b-b960-a4cd91f463dc",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0278d6eb-ef98-4df5-a295-2ac57b9a0e42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN1}}\",\r\n\"fingerprint\":\"{{fingerprint3}}\",\r\n\"position\":\"GT\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position as whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22f98531-0ad2-42f5-9e97-a8d566eddb8b",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c49d1800-88de-472d-8030-c02dfa61371b",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0aba5516-6f90-481f-866e-3b67c442c845",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN1}}\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\":\"  \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/finger-print"
							},
							"response": []
						},
						{
							"name": "Validate NIN with fingerprint position as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22f98531-0ad2-42f5-9e97-a8d566eddb8b",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.status).to.eql(400);\r",
											"    pm.expect(responseJson.detail).to.eql('Failed to read request');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c49d1800-88de-472d-8030-c02dfa61371b",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ff013d1d-1477-425f-912c-720567e837bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN1}}\",\r\n\"fingerprint\":\"{{fingerprint5}}\",\r\n\"position\":\"5G\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}api/v1/nin/validate/finger-print?",
									"host": [
										"{{url}}api"
									],
									"path": [
										"v1",
										"nin",
										"validate",
										"finger-print"
									],
									"query": [
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "13111457-b828-4fbc-a8b7-73df16f63917"
				},
				{
					"name": "NIN and Face image Validation",
					"item": [
						{
							"name": "Validate NIN with face image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "010922da-c1d1-40d4-a3c8-99c4af9846b1",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"    // pm.expect(responseJson.responseCode).to.eql(\"01\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d361af7-d3c1-463f-8ae9-acd4a7c42384",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d5f31752-3388-475a-8372-7cb9e1597987",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"11111111111\",\r\n  \"photo\": \"\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid face image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5289b061-b267-4e9a-8985-726988c4c2da",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37ad4a58-ab86-4c10-9660-eab1ca128719",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7b1c8fef-2236-4e48-9453-aa249ef387e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\":\"{{NIN}}\",\r\n  \"photo\":\"{{invalidImage}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid face image as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aba7f790-ecde-4951-a9e7-86b730da517a",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4078ddcc-676b-4a30-ae8a-8e80c0d9412d",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f838919d-5943-4642-927b-165b09647579",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nin\": \"{{NIN1}}\",\r\n    \"photo\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid face image as white space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb418fb9-2c11-4aa3-be19-1e6f1a046d71",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "728dfd81-e49a-4301-8f51-f35a48a15492",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3929930e-23f8-4802-93ed-b383b4b2c4d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"photo\":\"   \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid face image as random string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "34a7c53f-7947-4d70-b7f1-a9954d30b4dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{NIN}}\",\r\n\"photo\":\"bhdjd363728fbrbJNJDPHKEH345nfb\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with invalid face image and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.not.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"    pm.expect(responseJson.data.responseCode).to.eql('01');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "30c814c1-e665-42e9-9fca-0af5e64751d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"photo\":\"{{invalidImage}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with face image and invalid NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data property\", function () {\r",
											"    var responseData = pm.response.json().data; \r",
											"    pm.expect(responseData).to.not.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    pm.expect(responseJson.message).to.eql('Successful');\r",
											"    pm.expect(responseJson.data.responseCode).to.eql('01');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7e01242d-948f-49c8-ae5b-4da4ff10441f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"{{invalidNIN}}\",\r\n\"photo\":\"{{image}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with face image and incomplete NIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4a05c217-2bb8-4b59-ac74-9f5208f41b6c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"265988735\",\r\n\"photo\":\"{{image}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with face image and NIN as alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "218ac305-c168-4102-8ecd-1f469531a9ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"JKSCBCODJJ\",\r\n\"photo\":\"{{image}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with face image and NIN as alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3aae13b2-8b28-4d67-a58a-cfaa86ba993c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"JKSCO4775DJJ\",\r\n\"photo\":\"{{image}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with face image and NIN as empty string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d8f0ab58-5d03-4643-a6dd-2351b7eb620e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"\",\r\n\"photo\":\"{{image}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with face image and NIN as white space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "028042f5-b8f5-4957-913f-be4f1f8c9327",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\"      \",\r\n\"photo\":\"{{image}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						},
						{
							"name": "Validate NIN with face image and NIN as special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb0bea18-48dc-4961-88bf-cb7291dd7fc0",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with field errors property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('fieldErrors');\r",
											"})\r",
											"\r",
											"pm.test(\"Verify fieldName property\", function () {\r",
											"    var responseData = pm.response.json().fieldErrors; \r",
											"    responseData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"fieldName\");\r",
											"        pm.expect(item).to.have.property(\"message\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.success).to.eql(false);\r",
											"    pm.expect(responseJson.message).to.eql('Validations Error');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5487284d-4bb8-4fd3-9224-22605ed0ba93",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7bb383d5-48e8-4245-997a-710dce19bf65",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "12kwoeo2o3keo2o30d",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "1234565",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"nin\":\";',./><?[:\",\r\n\"photo\":\"{{image}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/face"
							},
							"response": []
						}
					],
					"id": "b3bd1dc3-644f-4691-9a94-b82d67619320"
				},
				{
					"name": "Summary",
					"item": [
						{
							"name": "Validate NIN with Name",
							"id": "ed0a1631-8549-4cd6-b896-2816945820f4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									},
									{
										"key": "ClientId",
										"value": "{{clientId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nin\": \"11111111111\",\r\n  \"fullName\": \"Uzoh Anthony\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/nin/validate/summary"
							},
							"response": []
						}
					],
					"id": "73118ac9-7b6f-4f3b-9b7b-6a7b1d0a7c2d"
				}
			],
			"id": "77217ea9-ee4e-40f7-8dc7-8b249346abe5"
		},
		{
			"name": "EID-CONTROLLER",
			"item": [
				{
					"name": "Card Status",
					"item": [
						{
							"name": "send card status as printed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b805ddb-573e-4083-b785-f6775bf06168",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"    // pm.expect(responseJson.responseCode).to.eql(\"01\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0752d8be-80a4-46ac-b092-f3ae0a9626a8",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "056734c2-0199-435b-b67a-594f6b314390",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//   \"uniqueId\": \"{{uniqueId}}\",\r\n//   \"date\": \"{{validDOBformat}}\",\r\n//   \"status\": \"PRINTED\"\r\n// }\r\n\r\n// alternate status\r\n\r\n{\r\n  \"uniqueId\": \"W63344944\",\r\n  \"status\": \"PRINTED\",\r\n  \"date\": \"21-01-2024\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						},
						{
							"name": "send card status as printed with uniqueId as special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b805ddb-573e-4083-b785-f6775bf06168",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"    pm.expect(responseJson.data.responseCode).to.eql(\"02\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0752d8be-80a4-46ac-b092-f3ae0a9626a8",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "327be23b-652c-4693-9913-ed09d0443ebe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"uniqueId\": \"';.,/][?><\",\r\n  \"date\": \"{{validDOBformat}}\",\r\n  \"status\": \"PRINTED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						},
						{
							"name": "send card status as active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56557ba3-646e-43ef-a12f-47bddfd5c901",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "707af911-fd02-481f-83b7-a6b99c3ac8b7",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d1715b3d-0208-40b4-8faa-bea34cb0591a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"uniqueId\": \"{{uniqueId}}\",\r\n  \"date\": \"{{validDOBformat}}\",\r\n  \"status\": \"NEW\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						},
						{
							"name": "send card status as active with uniqueId as special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b805ddb-573e-4083-b785-f6775bf06168",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"    pm.expect(responseJson.data.responseCode).to.eql(\"02\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0752d8be-80a4-46ac-b092-f3ae0a9626a8",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b898b624-ca85-4cbf-8cbd-d0bdf160008a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"uniqueId\": \":><.,\",\r\n  \"date\": \"{{validDOBformat}}\",\r\n  \"status\": \"NEW\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						},
						{
							"name": "send card status as delivered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44af1679-cd5e-4fdf-9f4a-1c9564451c5b",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dca51d77-0f90-4f4d-9605-b503699c2775",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cb527b32-829b-41c2-9488-539d83846217",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"uniqueId\": \"{{uniqueId}}\",\r\n  \"date\": \"{{validDOBformat}}\",\r\n  \"status\": \"PICKED_UP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						},
						{
							"name": "send card status as delivered with uniqueId as special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b805ddb-573e-4083-b785-f6775bf06168",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    pm.expect(responseJson.message).to.eql(\"Successful\");\r",
											"    pm.expect(responseJson.data.responseCode).to.eql(\"02\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0752d8be-80a4-46ac-b092-f3ae0a9626a8",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b9079dba-503e-4fc7-82ad-e7ef3dac5893",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"uniqueId\": \":><.,\",\r\n  \"date\": \"{{validDOBformat}}\",\r\n  \"status\": \"PICKED_UP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						},
						{
							"name": "send card status as empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be4b0015-2857-4406-97a6-603456503ee1",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.status).to.eql(400);\r",
											"    pm.expect(responseJson.detail).to.eql('Failed to read request');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "771acdc0-c013-4b15-b905-38e7fabd0f61",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "411a6939-b528-4e87-9efa-c3581243cd43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"uniqueId\": \"{{uniqueId}}\",\r\n  \"date\": \"{{validDOBformat}}\",\r\n  \"status\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						},
						{
							"name": "send card status as random string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eecce619-e95b-4bcc-87ec-2f1dcd92aa96",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.test('Verify response value', function () {\r",
											"    pm.expect(responseJson.status).to.eql(400);\r",
											"    pm.expect(responseJson.detail).to.eql('Failed to read request');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67739030-c082-49db-b243-51e58ff94e2e",
										"exec": [
											"// Definition of the NIN function\r",
											"function NIN(length) {  \r",
											"  var text = \"\";  \r",
											"  var possible = \"0123456789\"; \r",
											"  for (var i = 0; i < length; i++)    \r",
											"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
											"  return text;\r",
											"}\r",
											"\r",
											"// Generating three different NIN values\r",
											"var nin1 = NIN(11);\r",
											"var nin2 = NIN(11);\r",
											"var nin3 = NIN(11);\r",
											"\r",
											"// Setting each NIN value as an environment variable in Postman\r",
											"pm.collectionVariables.set(\"NIN_1\", nin1);\r",
											"pm.collectionVariables.set(\"NIN_2\", nin2);\r",
											"pm.collectionVariables.set(\"NIN_3\", nin3);\r",
											"\r",
											"console.log(\"NIN_1:\", nin1);\r",
											"console.log(\"NIN_2:\", nin2);\r",
											"console.log(\"NIN_3:\", nin3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f2dd104f-6527-49c0-b21e-f1b39ef5ea4a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"uniqueId\": \"{{uniqueId}}\",\r\n  \"date\": \"{{validDOBformat}}\",\r\n  \"status\": \"KFDG5757GFG\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/card/status"
							},
							"response": []
						}
					],
					"id": "e9ffd26c-25fc-47ef-9bbb-d0e6cb034c6b"
				},
				{
					"name": "eID Batch Upload",
					"item": [
						{
							"name": "Upload eID batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70793e6e-8bca-492a-9663-6fd74a519ce9",
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is an object with data property', function () {\r",
											"    pm.expect(responseJson).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response value\", function() {\r",
											"    pm.expect(responseJson.success).to.eql(true); \r",
											"    // pm.expect(responseJson.data.responseCode).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e2b95d5b-4883-44f3-989d-56d8382fd749",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"serialNo\": 1,\r\n            \"nin\": \"36650419071\"\r\n        },\r\n        {\r\n            \"serialNo\": 2,\r\n            \"nin\": \"27195118257\"\r\n        },\r\n        {\r\n            \"serialNo\": 3,\r\n            \"nin\": \"46732101483\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						},
						{
							"name": "Upload eID batch with invalid NIN",
							"id": "0c59880a-aedc-480b-9236-44e1c0f7b233",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"nin\": \"{{invalidNIN}}\",\r\n      \"serialNo\": 0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						},
						{
							"name": "Upload eID batch with incomplete NIN",
							"id": "10bf876e-602e-4144-8e1d-61f157aa1643",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"nin\": \"3537383\",\r\n      \"serialNo\": 0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						},
						{
							"name": "Upload eID batch with NIN as empty",
							"id": "ab64533e-18c1-485a-833a-59bd7ef45bbf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"nin\": \"\",\r\n      \"serialNo\": 0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						},
						{
							"name": "Upload eID batch with NIN as white space",
							"id": "25d96e0f-e8ab-44f6-a2f4-2118257f2cf2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"nin\": \"   \",\r\n      \"serialNo\": 0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						},
						{
							"name": "Upload eID batch with NIN as alphabets",
							"id": "5bf094be-8659-41b0-8f54-7a248e7283e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"nin\": \"JKDBDSKJOFBJK\",\r\n      \"serialNo\": 0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						},
						{
							"name": "Upload eID batch with NIN as alphanumeric",
							"id": "a3407906-7d60-4232-9ec6-f950b5259f97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"nin\": \"D3878JOFBJK\",\r\n      \"serialNo\": 0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						},
						{
							"name": "Upload eID batch with NIN as special characters",
							"id": "846a11bc-d576-41bb-adbf-9e00cf35835e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": [\r\n    {\r\n      \"nin\": \";':><\",\r\n      \"serialNo\": 0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}api/v1/electronic-id/batch/upload"
							},
							"response": []
						}
					],
					"id": "9b252cbc-b19c-49a5-8ab2-3c4f536557d1"
				},
				{
					"name": "eID Batch Download",
					"item": [
						{
							"name": "Download eID batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8179e99b-be39-4f53-b7fa-5ebb31154a5a",
										"exec": [
											"var responseJson = pm.response.json();",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Response is an object with data property', function () {",
											"    pm.expect(responseJson).to.be.an('object').that.has.property('data');",
											"})",
											"",
											"pm.test(\"Verify response value\", function() {",
											"    pm.expect(responseJson.success).to.eql(true); ",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8036d3fd-425b-4a76-8cc8-e3368639ca08",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "applicationId",
										"value": "{{applicationId}}",
										"type": "text"
									}
								],
								"url": "{{url}}api/v1/electronic-id/batch/download/1234565-1709728497.txt"
							},
							"response": []
						}
					],
					"id": "9afdf0d4-ca77-49f6-a560-2957dee60dbe"
				}
			],
			"id": "212de30b-88fc-48a8-8b79-cb3e77973461"
		},
		{
			"name": "NOTIFICATION CONTROLLER",
			"item": [
				{
					"name": "eID update Notification",
					"id": "f8b206fa-e161-403f-a6bf-ac6b5088706d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"uniqueId\": \"W83025808\",\r\n    \"date\": \"2024-04-12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}api/v1/nimc/e-id/update/notify"
					},
					"response": []
				},
				{
					"name": "Bulk eID update Notification",
					"id": "20f51773-431e-4433-9758-ba75c313d05e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"uniqueId\": \"D30061455\",\r\n        \"date\": \"2024-04-12\"\r\n    },\r\n    {\r\n        \"uniqueId\": \"Q97620022\",\r\n        \"date\": \"2024-04-13\"\r\n    },\r\n    {\r\n        \"uniqueId\": \"W83025808\",\r\n        \"date\": \"2024-07-12\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}api/v1/nimc/e-id/update/bulk-notify"
					},
					"response": []
				}
			],
			"id": "dc3087bd-27c8-4dec-a876-6ace9d412316"
		},
		{
			"name": "CLIENT CNTRL",
			"item": [
				{
					"name": "Client",
					"id": "1e01d732-623d-4690-a5a7-df338d3d8625",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"DAM BANK\",\r\n  \"callBackUrl\": \"string\",\r\n  \"gatewayClientId\": \"47974KJSDF\",\r\n  \"email\": \"admin@dam.com\",\r\n  \"billingAccountNumber\": \"766478448\",\r\n  \"billingBankCode\": \"9773\",\r\n  \"billingAccountName\": \"Dam Bank\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}api/v1/client"
					},
					"response": []
				}
			],
			"id": "71854c29-23f1-41c2-8f6e-701ec760e5f6"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6bb7980d-5007-4c38-b1a0-430c9065dc92",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "32d07cc8-306e-4735-bd4e-1ffc7d8cd268",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://10.43.52.146:8283/",
			"type": "string"
		},
		{
			"key": "NIN1",
			"value": "",
			"type": "string"
		},
		{
			"key": "NIN2",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint1",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint2",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint3",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint4",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint5",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint6",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint7",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint8",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint9",
			"value": "",
			"type": "string"
		},
		{
			"key": "fingerprint10",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidfingerprint",
			"value": "",
			"type": "string"
		},
		{
			"key": "image",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidImage",
			"value": "",
			"type": "string"
		},
		{
			"key": "clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "applicationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "uniqueId",
			"value": "",
			"type": "string"
		},
		{
			"key": "validDOBformat",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidDOBformat",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidNIN",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstname",
			"value": "",
			"type": "string"
		},
		{
			"key": "lastname",
			"value": "",
			"type": "string"
		},
		{
			"key": "middlename",
			"value": "",
			"type": "string"
		},
		{
			"key": "NIN_1",
			"value": ""
		},
		{
			"key": "NIN_2",
			"value": ""
		},
		{
			"key": "NIN_3",
			"value": ""
		}
	]
}